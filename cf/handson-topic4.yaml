AWSTemplateFormatVersion: 2010-09-09

## =================== DESCRIPTION =================== ##
Description: >-
  A Cloudformation Stack for building a CI/CD job of a docker image that inside of a Github repo and a new private DTR to push to after CI/CD job.
  Some environment vars are predefined in this stack, so do not need to write them inside the cicd job's definition file.
    - AWS Codebuild
    - Amazon Elastic Container Registry
    - AWS Secrets Manager
    - AWS IAM Role
  After stack is launched and finished,User need to :
   1. provide in the Github repo a Dockerfile and all needed files for image's build
   2. provide in the same Github repo a functional buildspec.yml for AWS Codebuild


## ===================== METADATA ===================== ##
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Tag parameters for all tagable resources
        Parameters:
          - paramUniqueTagName
          - paramUniqueTagValue
      - Label:
          default: Github parameters
        Parameters:
          - paramGithubRepo
          - paramGithubToken
          - paramGitTiggerPath
      - Label:
          default: AWS Authentication parammeters
        Parameters:
          - paramAWSAcessKey
          - paramAWSAcessSecret

## ==================== PARAMETERS ==================== ##
Parameters:
  paramUniqueTagName:
    Type: String
    Default: 'yuanchao-handson-tag'
    Description: unique tag for all resources defined in this stack Cloudformation
  paramUniqueTagValue:
    Type: String
    Description: unique tag's value
  paramGithubRepo:
    Description: Target Github repo url for codebuild project
    Type: String
  paramGithubToken:
    Description: GitHub personal token for connecting to target Github repo
    Type: String
  paramGitTiggerPath:
    Description: Only the change on this path will trigger Codebuild's CI/CD job
    Type: String
  paramAWSAcessKey:
    Description: AWS_ACCESS_KEY_ID predefined var for AWS's authentication actions inside Codebuild
    Type: String
  paramAWSAcessSecret:
    Description: AWS_ACCESS_KEY_SECRET predefined var for AWS's authentication actions inside Codebuild
    Type: String
## ==================== MAPPINGS ==================== ##
#Mappings:


## ==================== CONDITIONS ==================== ##
#Conditions:


## =================== RESOURCES =================== ##
Resources:
  MyRepo: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub 'repo-${paramUniqueTagValue}'
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              AWS: 
               - !Ref AWS::AccountId
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
      Tags:
      - Key: !Ref paramUniqueTagName
        Value: !Ref paramUniqueTagValue

  MySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'secret-${paramUniqueTagValue}'
      Description: Sotre Github personal token
      SecretString: !Sub '{"Githubtoken":"${paramGithubToken}"}'
      Tags:
      - Key: !Ref paramUniqueTagName
        Value: !Ref paramUniqueTagValue

  MySecretAcessKey:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'secret-${paramUniqueTagValue}-awsacesskey'
      Description: Sotre Github personal token
      SecretString: !Sub '{"AWSAcessKey":"${paramAWSAcessKey}"}'
      Tags:
      - Key: !Ref paramUniqueTagName
        Value: !Ref paramUniqueTagValue

  MySecretAcessSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'secret-${paramUniqueTagValue}-awsacesssecret'
      Description: Sotre Github personal token
      SecretString: !Sub '{"AWSAcessSecret":"${paramAWSAcessSecret}"}'
      Tags:
      - Key: !Ref paramUniqueTagName
        Value: !Ref paramUniqueTagValue



  myCBSourceCredential:
    Type: 'AWS::CodeBuild::SourceCredential'
    Properties:
      Token: !Sub "{{resolve:secretsmanager:${MySecret}::Githubtoken}}"
      ServerType: GITHUB
      AuthType: PERSONAL_ACCESS_TOKEN



  myCBProject:
    DependsOn: myCBSourceCredential
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'cbproject-${paramUniqueTagValue}'
      Visibility: PRIVATE
      ServiceRole: !GetAtt myCBRole.Arn
      Artifacts:
        Type: no_artifacts
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
        - Name: IMAGE_REPO_NAME
          Type: PLAINTEXT
          Value: !Ref MyRepo
        - Name: AWS_ACCESS_KEY_ID
          Type: SECRETS_MANAGER
          Value: !Sub "{{resolve:secretsmanager:${MySecretAcessKey}::AWSAcessKey}}"
        - Name: AWS_SECRET_ACCESS_KEY
          Type: SECRETS_MANAGER
          Value: !Sub "{{resolve:secretsmanager:${MySecretAcessSecret}::AWSAcessSecret}}"
      Source:
        Location: !Ref paramGithubRepo
        BuildSpec: buildspec.yml
        Type: GITHUB
        #Auth:
        #  Resource: !Ref myCBSourceCredential
        #  Type: OAUTH
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
            - Type: HEAD_REF
              Pattern: ^refs/heads/master
            - Type: FILE_PATH
              Pattern: !Ref paramGitTiggerPath
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Sub 'cwgroup-${paramUniqueTagValue}'
          Status: ENABLED
      Tags:
      - Key: !Ref paramUniqueTagName
        Value: !Ref paramUniqueTagValue

  myCBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'role-${paramUniqueTagValue}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub 'policy-${paramUniqueTagValue}'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            -  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-*'
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketAcl
            - s3:GetBucketLocation
          - Effect: Allow
            Action: 
            - secretsmanager:GetSecretValue
            Resource:
            - !Ref MySecretAcessKey
            - !Ref MySecretAcessSecret
      Tags:
      - Key: !Ref paramUniqueTagName
        Value: !Ref paramUniqueTagValue

## ======================= OUTPUT ====================== ##
Outputs:
  outputRepoURI:
    Description:  URI of my private AWS Docker register(ECR)
    Value: !GetAtt MyRepo.RepositoryUri
